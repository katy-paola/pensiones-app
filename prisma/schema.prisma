// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  lastName      String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rol           Role       @default(STUDENT)
  homeOwner     HomeOwner?
  student       Student?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// DE AQUI PARA ABAJO VAN LAS ENTIDADES
model HomeOwner {
  id      String    @id @default(cuid())
  phone   String
  address String
  user    User      @relation(fields: [userId], references: [id])
  userId  String    @unique
  pension Pension[]
}

model Student {
  id               String    @id @default(cuid())
  favoritePensions Pension[]
  reviews          Review[]
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
}

model Pension {
  id          String     @id @default(cuid())
  name        String
  description String
  image       String[]
  price       Float
  location    String
  address     String
  reviews     Review[]
  amenities   String
  services    String
  rules       String
  HomeOwner   HomeOwner? @relation(fields: [homeOwnerId], references: [id])
  homeOwnerId String?
  students    Student[]
}

model Review {
  id          String   @id @default(cuid())
  title       String
  description String
  rating      String
  pension     Pension  @relation(fields: [pensionId], references: [id], onDelete: Cascade)
  pensionId   String
  author      Student? @relation(fields: [authorId], references: [id])
  authorId    String?
}

enum Role {
  HOMEOWNER
  STUDENT
}
